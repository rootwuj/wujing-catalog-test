iCVE CVE-2018-1002105 刚刚在Kubernetes宣布。我在11月初发现了这个问题，但这个bug实际上可以追溯到几年前，这是一个非常有趣的故事和技术问题。由于这是Kubernetes的第一个关键CVE，它受到了很多关注，但我认为它并不像大多数人想象的那么糟糕。事实上，我认为恰恰相反：这个CVE显示了社区的强大程度以及它的运行情况。

Amazon ALB的问题
这一切都始于2016年，当时我们发布了Rancher 1.6。2016年中期亚马逊发布了ALB，这是一个新的HTTP（第7层）负载均衡器。ALB的设置比ELB容易得多，因此在Rancher 1.2中我们告诉用户使用ALB。相当快，我们开始收到有关ALB后面的设置失败的报告，很多随机请求只会得到401,403,404,503。我们自己永远无法重现这个问题，我们从社区成员那里得到的所有日志都没有意义。我们看到了HTTP请求和响应，我们无法将其与代码相关联。相当愚蠢的我们只是假设ALB是新的，可能有错误。我们从未遇到任何其他负载均衡器的问题，只有ALB。我们最终告诉用户不要使用ALB。

快进到今年8月，社区成员向Rancher 2.1提交了同样的问题（https://github.com/rancher/rancher/issues/14931）。同样，使用ALB导致奇数401和403错误。这引起了我的兴趣，因为Rancher 1.x和2.x之间没有共同的代码，ALB现在应该相当成熟。经过一番挖掘，我发现问题与不处理非101响应和反向代理缓存TCP连接有关。为了理解这个问题，您必须了解TCP连接重用，websockets如何使用TCP连接以及HTTP反向代理。

TCP连接重用
在一种非常天真的HTTP方法中，客户端将打开TCP套接字，发送HTTP请求，读取HTTP响应，然后关闭TCP套接字。很快你就会发现你花了太多时间打开和关闭TCP连接。因此，HTTP协议具有内置的机制，以便客户端可以跨请求重用TCP连接。

的WebSockets
Websockets是双向通信，其工作方式与HTTP请求/响应流不同。为了使用websockets，客户端首先发送HTTP升级请求，服务器响应HTTP 101 Switch Protocols响应。收到101后，TCP连接现在专用于websocket。在TCP连接的剩余生命周期中，假设它专用于该websocket连接。这意味着永远不会重用此TCP连接。

HTTP反向代理
HTTP反向代理（负载平衡器是一种反向代理）从客户端接收请求，然后将它们发送到不同的服务器。对于标准HTTP请求，它只写入请求，读取响应，然后将响应发送到客户端。这是相当直接的，Go包含一个内置的反向代理https://golang.org/pkg/net/http/httputil/#ReverseProxy。Websockets有点困难。对于websocket，你必须查看请求，看到它是一个升级请求，发送请求，读取101响应，然后劫持TCP连接，然后开始来回复制字节。对于反向代理，它不会在此之后查看连接的内容，它只是创建一个“哑管”。标准Go库中不存在此逻辑，许多开源项目都编写了代码来执行此操作。

错误
TL; DR是Kubernetes在启动“转储管道”之前没有检查101响应。在代码的防御中，这通常是不检查101.这实际上是为什么Rancher 1.x和Rancher 2.0有同样的问题，即使它使用完成不同的代码。破碎的场景如下。

客户端发送websocket升级请求
反向代理向后端服务器发送升级请求
后端服务器以404响应
反向代理启动复制循环并将404写入客户端
客户端看到404响应并将TCP连接添加到“空闲连接池”
在这种情况下，如果客户端重新使用TCP连接，它将向TCP连接写入请求，它将通过反向代理中的“转储管道”并将其发送到前一个后端。通常这不会很糟糕，例如在负载均衡器的情况下，因为所有请求都转到同一组同类后端。当反向代理是智能的并执行身份验证，授权和路由（Kubernetes所做的全部）时，会出现此问题。

安全漏洞
因为101未被处理，所以客户端最终使用TCP连接，该连接是对某些先前访问的后端服务的“转储管道”。这导致特权升级。问题是Kubernetes将仅在反向代理中执行许多请求的授权。这意味着如果我执行一个授权的失败的websocket请求路由到一个kubelet，我可以保持与该kubelet的持久连接，然后运行我选择的任何API命令，无论我是否被授权。例如，您可以在任何pod上运行exec并复制出秘密。因此，在这种情况下，已经授权的用户基本上可以获得对kubelet的完全API访问（同样的事情适用于通过kube-aggregation运行的服务）。

当您添加另一个反向代理时，会出现另一个问题。在这种情况下，您将HTTP负载均衡器放在Kubernetes API（不是第4层负载均衡器）之前。如果执行此操作，则运行“dump pipe”的经过身份验证的TCP连接将添加到任何用户都可以获得的空闲池中。因此，用户A创建TCP连接，然后用户B重新使用该连接。在这种情况下，未经过身份验证的用户可以访问您的群集。

此时你可能会感到恐慌，因为当然每个人都会在kube-apiserver前放置一个负载平衡器。好…。首先，您必须运行HTTP负载平衡器，而不是TCP负载平衡器。负载均衡器必须了解HTTP语义才能产生此问题。其次，幸运的是大多数反向代理并不关心101个回复。这就是为什么这个问题已经发生很久（实际上很多开源项目）未被发现的原因。大多数负载均衡器在看到升级请求后不会重用TCP连接，而不是101响应。所以有趣的是，如果您容易受到此问题的影响，那么您的Kubernetes设置应该已经不可靠了，您应该看到随机失败或挂起的请求。我知道ALB就是这样工作的，所以在修补Kubernetes之前不要使用ALB。

简而言之，此问题可以允许具有正确权限的任何经过身份验证的用户获得更多权限。如果您正在运行硬件多租户群集（不受信任的用户），您应该担心。如果您不担心用户主动互相攻击（大多数多租户群集都是这样），那么不要惊慌，只需升级。如果条件恰到好处，未经身份验证的用户可以进入您的群集。您的负载均衡器很有可能阻止这种情况，但只是不要将API暴露给世界，在其上放置一些适当的ACL并且您很可能应该是好的。

感谢开源
我想指出，这个CVE是由开源社区发现，修复和交付的。这证明了Kubernetes的运行情况。我第一次发现这个问题是因为Rancher的非付费开源用户。事实上，我们已经知道报告的问题并没有影响Rancher 2.0的客户，因为我们的HA架构恰好否定了ALB的行为。我们解决这个问题仅仅因为我们喜欢我们的开源用户。只有在修复此错误时，我们发现它具有安全隐患。我通过已建立的安全公开流程向Kubernetes社区提交了该问题，并且很快就将问题上游正确修补并向后传输到1.10,1.11,1.12和1.13。

知道Kubernetes的用户掌握得很好，请放心。不要惊慌，只需升级您的群集并继续。

达伦谢泼德
Darren Shepherd 
联合创始人兼首席架构师

在担任Rancher之前，Darren是Citrix的高级首席工程师，负责CloudStack，OpenStack，Docker以及构建下一代架构流程技术。在加入Citrix之前，Darren曾在GoDaddy工作，在那里他设计并领导了一个实施公共和私有IaaS云的团队。达伦自从10岁时获得了他的第一个286以来一直在编写软件，当他被塞进一个除了Java以外的任何东西的壁橱里时，他最开心。Darren专注于构建系统，以可靠地控制完全不可靠的系统。Darren拥有加州州立大学北岭分校的学士学位。j
